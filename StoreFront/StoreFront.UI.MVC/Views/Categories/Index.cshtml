@model IEnumerable<StoreFront.Data.EF.Models.Category>

@{
    ViewData["Title"] = "Index";
}

<section class="product_section gray-section pb-4 pt-4 mb-4">
    <div class="heading_container" align="center">
        <h2>
            Our <span>Categories</span>
        </h2>
        <p align="center">


        </p>
    </div>
</section>

@if (User.IsInRole("ADMIN"))
{
    <section>
        <div class="row">
            <div align="center" class="col-md-6 offset-md-3 mb-3">
                <button id="ToggleCategoryCreate" class="btn btn-primary">Add New Category</button>
            </div>
        </div>

        <div id="CategoryCreate">
            <partial name="CategoryCreate" model="new StoreFront.Data.EF.Models.Category()" />
        </div>


        <div class="row">
            <div class="col-sm-6 offset-md-3">
                <div id="MessageContent" class="text-center">
                    @*Div is blank because we're going to use JavaScript to populate*@
                </div>

            </div>
        </div>
    </section>
}
<section class="product_section pb-4 pt-4 m-4">

    <table class="table" id="CategoriesTable">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Type)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr id="Category-@item.CategoryId">
                    <td>
                        @Html.DisplayFor(modelItem => item.Type)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.CategoryId">Edit</a> |
                        <a class="DetailsLink" id="@item.CategoryId" data-toggle="modal" data-target="#CategoriesDetails">Details</a> |
                        @*<a asp-action="Delete" asp-route-id="@item.CategoryId">Delete</a>*@
                        <a data-ajax="true" data-ajax-confirm="Are you sure you want to delete @item.Type?" data-ajax-failure="deleteFailed" data-ajax-success="deleteConfirmed" data-ajax-method="POST" href="~/Categories/AjaxDelete/@item.CategoryId">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</section>

<div class="modal fade" id="CategoryDetails" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Details</h5>
            </div>
            <div class="modal-body" id="DetailsBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        //***AJAX DELETE*/
        function deleteConfirmed(response, status, data) {
            let rowId = "#Category-" + response.id;

            $("#CategoriesTable").find(rowId).remove();

            $("#MessageContent").html(`<div class='alert alert-success'>` + response.message + `</div>`);
        }

        function deleteFailed(response, status, data) {
            $("#MessageContent").html(`<div class='alert alert-danger'>Delete unsuccessful</div>`);
        }

        //***AJAX DETAILS*/
        $(".DetailsLink").on("click", function (e) {
            let manId = $(this).attr("id");

            $("#CategoryDetails .modal-body").load("/Category/CategoryDetails/" + manId)
        })

        //***AJAX CREATE*/
        $("#CategoryCreate").hide();

        $("#ToggleCategoryCreate").on("click", function () {
            $("#CategoryCreate").toggle();
        });

        /*Summary: When the form is submitted, we will serialize the data and then send that data (JSON) to the Controller. The MessageContent div will display any updates to the user.
          - Call the POST AjaxCreate() from the Categories controller
          - Pass the JSON data from the form
          - On failure: notify use of the error
          - On success: notify the user, reset the form, and insert the new row into the table on the page
        */
        $("#CategoryCreateForm").on("submit", function (e) {
            //Prevents default event behavior -- for forms, this is the page reload when submitted
            e.preventDefault();

            let formData = $(this).serializeArray();

            console.log(formData);

            $.ajax({
                url: "/Categories/AjaxCreate",
                type: "POST",
                data: formData,
                datatype: "json",
                error: function (e) {
                    $("#MessageContent").html(`<div class="alert alert-danger"> There was a problem... </div>`);
                },
                success: function (manufacturer) {
                    $("#MessageContent").html(`<div class='alert alert-success'> Category added!</div>`);
                    $("#CategoryCreateForm")[0].reset();
                    $(function () {
                        let row = `<tr id="Category-` + category.categoryid + `"><td>` + category.type +  `</td><td>Refresh page for options</td></tr>`;

                        $("#ManufacturerTable").append(row);

                        $("#ManufacturerCreate").hide();
                    });
                }
            });
        });
    </script>
 }